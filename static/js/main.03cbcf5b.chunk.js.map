{"version":3,"sources":["img/background.jpg","gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","App.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","background","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randomLetter","Math","floor","random","useStage","resetPlayer","useState","setStage","useEffect","prev","prevStage","newStage","map","row","cell","forEach","value","collided","updateStage","StyledStage","props","height","width","StyledCell","type","Cell","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","setGameOver","setPlayer","rotate","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","movePlayer","dropPlayer","console","log","role","tabIndex","onKeyDown","e","keyCode","move","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03cbcf5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.2bb7a3d7.jpg\";","const STAGE_WIDTH = 12;\nconst STAGE_HEIGHT = 20;\n\nconst createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\n  );\n\nconst checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // We're in the Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // The move is inside the game area: vertical\n          !stage[y + player.pos.y + moveY] ||\n          // and horizontal\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // We're not moving to a clear cell\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n\nexport { STAGE_WIDTH, STAGE_HEIGHT, createStage, checkCollision };\n","import styled from 'styled-components';\n\nimport background from '../../img/background.jpg';\n\nconst StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${background}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nconst StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`;\n\nexport { StyledTetrisWrapper, StyledTetris };\n","const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n      [0, 'I', 0, 0],\n    ],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [\n      [0, 'J', 0],\n      [0, 'J', 0],\n      ['J', 'J', 0],\n    ],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [\n      [0, 'L', 0],\n      [0, 'L', 0],\n      [0, 'L', 'L'],\n    ],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [\n      ['O', 'O'],\n      ['O', 'O'],\n    ],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [\n      [0, 'S', 'S'],\n      ['S', 'S', 0],\n      [0, 0, 0],\n    ],\n    color: '48, 211, 56',\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      ['T', 'T', 'T'],\n      [0, 'T', 0],\n    ],\n    color: '132, 61, 198',\n  },\n  Z: {\n    shape: [\n      ['Z', 'Z', 0],\n      [0, 'Z', 'Z'],\n      [0, 0, 0],\n    ],\n    color: '227, 78, 78',\n  },\n};\n\nconst randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randomLetter =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randomLetter];\n};\n\nexport { TETROMINOS, randomTetromino };\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nconst useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = (prevStage) => {\n      // First flush the stage\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n\nexport { useStage };\n","import styled from 'styled-components';\n\nconst StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${(props) => props.height},\n    calc(25vw / ${(props) => props.width})\n  );\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw \n  background: #111;\n`;\n\nexport { StyledStage };\n","import styled from 'styled-components';\n\nconst StyledCell = styled.div`\n  width: auto;\n  background: rgba(${(props) => props.color}, 0.8);\n  border: ${(props) => (!props.type ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${(props) => props.color}, 0.1);\n  border-right-color: rgba(${(props) => props.color}, 1);\n  border-top-color: rgba(${(props) => props.color}, 1);\n  border-left-color: rgba(${(props) => props.color}, 0.3);\n`;\n\nexport { StyledCell };\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default Cell;\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components';\n\nconst StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${(props) => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n\nexport { StyledDisplay };\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import styled from 'styled-components';\n\nconst StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport { StyledStartButton };\n","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n);\n\nexport default StartButton;\n","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  // const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage] = useStage(player, resetPlayer);\n\n  const movePlayer = (dir) => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const startGame = () => {\n    setStage(createStage());\n    resetPlayer();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game Over\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!');\n        setGameOver(true);\n        // setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      // Keys: 37 - left; 39 - right; 40 - down\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={(e) => move(e)}>\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text=\"Score\" />\n              <Display text=\"Rows\" />\n              <Display text=\"Level\" />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from 'react';\n\nimport { checkCollision, STAGE_WIDTH } from '../gameHelpers';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\n\nconst usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (tetromino, dir) => {\n    // Transpose: rows to cols\n    const rotatedTetro = tetromino.map((_, index) =>\n      tetromino.map((col) => col[index])\n    );\n    // Reverse each row\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n\nexport { usePlayer };\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}